{"version":3,"sources":["search.js","User.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","handleChange","type","onChange","User","user","this","name","first_name","last_name","className","src","avatar","alt","email","React","Component","Users","users","map","obj","index","key","App","state","search","fetch","then","response","json","setState","data","filterUsers","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAeeA,G,MAPA,SAASC,GAAQ,IACrBC,EAAgBD,EAAhBC,aACP,OACI,2BAAOC,KAAK,SAASC,SAAUF,MCQxBG,G,uLAfD,IAEEC,EAASC,KAAKN,MAAdK,KACFE,EAAOF,EAAKG,WAAa,IAAMH,EAAKI,UAE1C,OACI,yBAAKC,UAAU,OACX,4BAAKH,GACL,2BAAG,yBAAKI,IAAKN,EAAKO,OAAQC,IAAKN,KAC/B,2BAAIF,EAAKS,Y,GAXNC,IAAMC,YCqBVC,E,iLAfP,IAAMC,EAAQZ,KAAKN,MAAMkB,MAEzB,OACI,oCACI,yBAAKR,UAAU,cACVQ,EAAMC,KAAI,SAASC,EAAKC,GACrB,OAAO,kBAAC,EAAD,CAAMhB,KAAMe,EAAKE,IAAKD,a,GAVjCN,IAAMC,WCmCXO,E,YAhCb,WAAYvB,GAAQ,IAAD,8BACf,4CAAMA,KAEDwB,MAAQ,CACXN,MAAO,GACPO,OAAQ,IALK,E,iFASI,IAAD,OAEhBC,MADU,kDAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAT,GAAK,OAAI,EAAKY,SAAS,CAACZ,MAAOA,EAAMa,Y,+BAGvC,IAAD,SAEkBzB,KAAKkB,MAAtBC,EAFD,EAECA,OACFO,EAHC,EAESd,MACUe,QAAQ,SAAA5B,GAAI,OACpCA,EAAKG,WAAW0B,cAAcC,SAASV,EAAOS,kBAGhD,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAAQT,aAAe,SAAAmC,GAAC,OAAI,EAAKN,SAAS,CAACL,OAAQW,EAAEC,OAAOC,WAC5D,kBAAC,EAAD,CAAOpB,MAAOc,S,GA5BJjB,IAAMC,WCOJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.8f4d3add.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Search = props => {\r\n//     return(\r\n//         <input type=\"search\" onChange={this.onchangehandler} />\r\n//     );\r\n// };\r\n\r\nconst Search = function(props) {\r\n    const {handleChange} = props;\r\n    return(\r\n        <input type=\"search\" onChange={handleChange} />\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nclass User extends React.Component{\r\n\r\n    render() {\r\n\r\n        const { user } = this.props;\r\n        const name = user.first_name + ' ' + user.last_name;\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <h4>{name}</h4>\r\n                <p><img src={user.avatar} alt={name} /></p>\r\n                <p>{user.email}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport './Users.css';\r\nimport User from './User';\r\n\r\nclass Users extends React.Component {\r\n\r\n    render() {\r\n\r\n        const users = this.props.users;\r\n\r\n        return(\r\n            <>\r\n                <div className=\"users-list\">\r\n                    {users.map(function(obj, index){\r\n                        return <User user={obj} key={index} />;\r\n                    })\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\nimport './App.css';\nimport Search from './search';\nimport Users from './Users';\n\nclass App extends React.Component{\n\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        users: [],\n        search: '',\n      }\n    }\n\n    componentDidMount() {\n        let url = 'https://reqres.in/api/users?page=1&per_page=20';\n        fetch(url)\n        .then(response => response.json())\n        .then(users => this.setState({users: users.data}));\n    }\n\n  render() {\n\n    const { search, users} = this.state;\n    const filterUsers = users.filter( user => (\n      user.first_name.toLowerCase().includes(search.toLowerCase())\n    ))\n\n    return (\n      <div className=\"App\">\n        <Search handleChange={ e => this.setState({search: e.target.value})} />\n        <Users users={filterUsers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}